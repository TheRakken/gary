#!/usr/bin/env python
# coding: utf-8

""" Plot a given snap file. """

from __future__ import division, print_function

__author__ = "adrn <adrn@astro.columbia.edu>"

# Standard library
import os, sys

# Third-party
from astropy import log as logger
import astropy.units as u
import matplotlib.pyplot as plt
import numpy as np

# Project
import streamteam.dynamics as sd
import streamteam.io as sio
from streamteam.units import galactic

def main(snap_path, plot_cen=False, bound=None):
    path,snap_file = os.path.split(snap_path)

    scf = sio.SCFReader(path)
    tbl = scf.read_snap(snap_file, units=galactic)
    w = sio.tbl_to_w(tbl)

    if bound is None or plot_cen:
        cen_w = sio.tbl_to_w(scf.read_cen(galactic))

    if bound is None:
        R = np.sqrt(np.sum(cen_w[...,:3]**2, axis=-1))
        bound = R.max()*1.1

    fig = sd.plot_orbits(w, marker='.', linestyle='none', alpha=0.1)
    if plot_cen:
        fig.axes[0].plot(cen_w[...,0], cen_w[...,1], marker=None)
        fig.axes[1].plot(cen_w[...,0], cen_w[...,2], marker=None)
        fig.axes[2].plot(cen_w[...,1], cen_w[...,2], marker=None)

    fig.axes[0].set_xlim(-bound, bound)
    fig.axes[0].set_ylim(-bound, bound)

    try:
        pct_bound = sum(tbl['tub'] == 0) / float(len(w))*100.
    except KeyError:
        pct_bound = 0.
    ttext = "Time: {:05.2f} Gyr, Percent bound: {:04.1f}"\
                .format(tbl.meta['time']/1000., pct_bound)
    fig.suptitle(ttext, fontsize=20)
    fig.tight_layout()
    plt.show()

if __name__ == '__main__':
    from argparse import ArgumentParser
    import logging

    # Define parser object
    parser = ArgumentParser(description="")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose",
                        default=False, help="Be chatty! (default = False)")
    parser.add_argument("-q", "--quiet", action="store_true", dest="quiet",
                        default=False, help="Be quiet! (default = False)")

    parser.add_argument("-p", "--path", dest="snap_path", required=True,
                        type=str, help="Path to SNAP file.")
    parser.add_argument("--cen", dest="plot_cen", action="store_true",
                        default=False, help="Plot SCFCEN orbit.")
    parser.add_argument("--bound", dest="bound", type=float, default=None,
                        help="Bounding distance.")

    args = parser.parse_args()

    # Set logger level based on verbose flags
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    elif args.quiet:
        logger.setLevel(logging.ERROR)
    else:
        logger.setLevel(logging.INFO)

    main(args.snap_path, args.plot_cen, args.bound)